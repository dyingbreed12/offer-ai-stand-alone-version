// /src/components/OfferResults.tsx

'use client';

import { useAppContext } from '@/context/AppContext';
import { Offer } from '@/lib/types';
import { useState } from 'react';
import { DisabledOfferPrompt } from '../DisabledOfferPrompt/DisabledOfferPrompt';
import styles from './OfferResults.module.css';

interface OfferResultsProps {
  showToast: (
    type: 'success' | 'error' | 'warning' | 'info',
    title: string,
    message: string
  ) => void;
}

export const OfferResults = ({ showToast }: OfferResultsProps) => {
  const { state, saveOffer, setCurrentOffer } = useAppContext();
  const [showPrompt, setShowPrompt] = useState(false);

  if (!state.currentOffer) return null;
  const offer = state.currentOffer;

  const handleSaveOffer = () => {
    if (state.currentOffer) {
      saveOffer(state.currentOffer);
      showToast('success', 'Offer Saved', 'Your offer was saved successfully!');
    }
  };

  const handleGenerateNew = () => {
    setCurrentOffer(null);
  };

  const handleFindABuyer = () => {
    //handleSaveOffer();
    console.log("Find a buyer functionality triggered.");
  };

//   const handleDownloadOffer = () => {
//     if (!state.currentOffer) return;
//     const offerData = state.currentOffer;
//     const finalValue = getFinalDisplayedAmount(offerData);
//     const offerSheet = `
// PROFESSIONAL REAL ESTATE OFFER SHEET
// Generated by Lowball AI Bot

// PROPERTY INFORMATION
// ==========================================
// Property Address: ${offerData.address}
// Offer Type: ${getOfferTypeText(offerData.offerType)}
// Generated on: ${new Date().toLocaleDateString()}

// FINANCIAL BREAKDOWN
// ==========================================
// ${getBreakdownText(offerData)}

// FINAL OFFER: ${offerData.offerType === 'creative' ? `(Monthly) $${finalValue?.toLocaleString()}` : `$${finalValue?.toLocaleString()}`}

// ADDITIONAL NOTES
// ==========================================
// ${offerData.notes || 'No additional notes provided.'}
// This offer was generated using professional real estate investment calculations and market analysis.
//     `.trim();
//     const blob = new Blob([offerSheet], { type: 'text/plain' });
//     const url = window.URL.createObjectURL(blob);
//     const a = document.createElement('a');
//     a.href = url;
//     a.download = `offer-${offerData.address.replace(/[^a-zA-Z0-9]/g, '-')}-${Date.now()}.txt`;
//     document.body.appendChild(a);
//     a.click();
//     document.body.removeChild(a);
//     window.URL.revokeObjectURL(url);
//     showToast('success', 'Offer Downloaded', 'The offer has been downloaded!');
//   };

//   const handleShareOffer = () => {
//     if (!state.currentOffer) return;
//     const offerData = state.currentOffer;
//     const finalValue = getFinalDisplayedAmount(offerData);
//     const offerTypeDisplay = getOfferTypeText(offerData.offerType);
//     const shareText = `🏠 Professional Real Estate Offer Generated!\n\nProperty: ${
//       offerData.address
//     }\nOffer Amount: $${finalValue?.toLocaleString()}\nOffer Type: ${
//       offerTypeDisplay
//     }\n\nGenerated by Lowball AI Bot - Advanced Real Estate Investment Calculator`;
//     if (navigator.share) {
//       navigator.share({
//         title: 'Real Estate Investment Offer',
//         text: shareText,
//         url: window.location.href,
//       }).catch(console.error);
//     } else {
//       navigator.clipboard.writeText(shareText).then(() => {
//         showToast('info', 'Offer Copied', 'Offer details copied to clipboard!');
//       }).catch(() => {
//         showToast('error', 'Copy Failed', 'Could not copy to clipboard.');
//       });
//     }
//   };

  const getFinalDisplayedAmount = (offer: Offer) => {
    switch (offer.offerType) {
      case 'creative':
        return offer.monthlyPayment;
      case 'novation':
      case 'zestimate':
      case 'cash':
      default:
        return offer.offerAmount;
    }
  };

  const getOfferTypeText = (type: string) => {
    switch (type) {
      case 'cash':
        return 'Fix & Flip';
      case 'creative':
        return 'Seller Finance';
      case 'novation':
        return 'Novation';
      case 'zestimate':
        return 'Zillow';
      default:
        return 'Unknown';
    }
  };

  const getOfferIcon = (type: string) => {
    switch (type) {
      case 'cash':
        return '💵';
      case 'creative':
        return '🎨';
      case 'novation':
        return '📝';
      case 'zestimate':
        return '📈';
      default:
        return '❓';
    }
  };

  // const getBreakdownText = (offer: Offer) => {
  //   let breakdown = '';
  //   breakdown += `ARV (After Repair Value): $${offer.arv?.toLocaleString()}\n`;
  //   if (offer.offerType !== 'creative') {
  //     breakdown += `Estimated Repairs: $${offer.repairs?.toLocaleString()}\n\n`;
  //   }
  //   if (offer.offerType === 'creative') {
  //     breakdown += `As-Is Value: $${offer.asIsValue?.toLocaleString()}\n`;
  //     breakdown += `Downpayment: $${offer.downPayment?.toLocaleString()}\n`;
  //     breakdown += `Price: $${offer.price?.toLocaleString()}\n`;
  //     breakdown += `Term Length: ${offer.longLengthInMonths} months\n`;
  //   }
  //   return breakdown;
  // };
  
  const finalDisplayedAmount = getFinalDisplayedAmount(offer);
  const showDetailedBreakdown = ['cash', 'creative'].includes(offer.offerType as string);

  return (
    <div className="content-container">
      <div className={styles.offerResultsSection}>
        {/* Deal Score */}
        <div
          className={styles.dealScoreContainer}
          onClick={() => setShowPrompt(true)}
        >
          <span className={styles.dealScoreLabel}>Deal Score</span>
          <div className={styles.dealScoreCircle}>
            <span className={styles.dealScoreValue}>50</span>
          </div>
        </div>

        <div className={styles.offerResultsContent}>
          <h2 className={styles.offerResultsTitle}>
            Your Lowball Offer
          </h2>

          <div className={styles.offerAmount}>
            {offer.offerType === 'creative' ? `${finalDisplayedAmount?.toLocaleString()}/mo` : `$${finalDisplayedAmount?.toLocaleString()}`}
          </div>

          <div className={styles.offerTypeDisplay}>
            <span className={styles.offerTypeIcon}>{getOfferIcon(offer.offerType)}</span>
            {getOfferTypeText(offer.offerType)}
          </div>

          {showDetailedBreakdown && (
            <div className={styles.offerBreakdown}>
              <h3 className={styles.breakdownTitle}>Breakdown</h3>
              {offer.offerType === 'cash' && (
                <div className={styles.breakdownRow}>
                  <div className={`${styles.breakdownItem} ${styles.noBorderOrPadding}`}>
                    <span className={styles.breakdownLabel}>Property ARV:</span>
                    <span className={styles.breakdownValue}>${offer.arv?.toLocaleString()}</span>
                  </div>
                  <div className={`${styles.breakdownItem} ${styles.noBorderOrPadding}`}>
                    <span className={styles.breakdownLabel}>Repairs:</span>
                    <span className={styles.breakdownValue}>${offer.repairs?.toLocaleString()}</span>
                  </div>
                </div>
              )}
              {offer.offerType === 'creative' && (
                <>
                  <div className={styles.breakdownRow}>
                    <div className={`${styles.breakdownItem} ${styles.noBorderOrPadding}`}>
                      <span className={styles.breakdownLabel}>As-Is Value:</span>
                      <span className={styles.breakdownValue}>${offer.asIsValue?.toLocaleString()}</span>
                    </div>
                    <div className={`${styles.breakdownItem} ${styles.noBorderOrPadding}`}>
                      <span className={styles.breakdownLabel}>Downpayment:</span>
                      <span className={styles.breakdownValue}>${offer.downPayment?.toLocaleString()}</span>
                    </div>
                  </div>
                  <div className={styles.breakdownRow}>
                    <div className={`${styles.breakdownItem} ${styles.noBorderOrPadding}`}>
                      <span className={styles.breakdownLabel}>Price:</span>
                      <span className={styles.breakdownValue}>${offer.price?.toLocaleString()}</span>
                    </div>
                    <div className={`${styles.breakdownItem} ${styles.noBorderOrPadding}`}>
                      <span className={styles.breakdownLabel}>Term Length:</span>
                      <span className={styles.breakdownValue}>{offer.longLengthInMonths} months</span>
                    </div>
                  </div>
                  <div className={styles.finalOfferSection}>
                    <div className={`${styles.finalOfferItem} ${styles.noBorderOrPadding}`}>
                      <span className={styles.finalOfferLabel}>Final Offer (Monthly):</span>
                      <span className={styles.finalOfferValue}>
                        ${offer.monthlyPayment?.toLocaleString()}
                      </span>
                    </div>
                  </div>
                </>
              )}
            </div>
          )}

          <div className={`${styles.offerBreakdown} ${styles.financialsSection}`}>
            <h3 className={styles.breakdownTitle}>Financials</h3>
            <div className={styles.breakdownRow}>
              <div
                className={styles.breakdownItem}
                onClick={() => setShowPrompt(true)}
              >
                <span className={styles.breakdownLabel}>MAO (Max Offer):</span>
                <span className={`${styles.breakdownValue} ${styles.blurredText}`}>$250,000</span>
              </div>
              <div
                className={styles.breakdownItem}
                onClick={() => setShowPrompt(true)}
              >
                <span className={styles.breakdownLabel}>Assignment Fee:</span>
                <span className={`${styles.breakdownValue} ${styles.blurredText}`}>$10,000</span>
              </div>
            </div>
          </div>

          <div className={styles.offerActions}>
            <button
              className={`${styles.actionBtn} ${styles.save}`}
              onClick={handleSaveOffer}
              type="button"
            >
              <span className={styles.btnIcon}>💾</span>
              Save Offer
            </button>
            <button
              className={`${styles.actionBtn} ${styles.generateNew}`}
              onClick={handleGenerateNew}
              type="button"
            >
              <span className={styles.btnIcon}>🔄</span>
              Generate New
            </button>
            <button
              className={`${styles.actionBtn} ${styles.findBuyer}`}
              onClick={handleFindABuyer}
              type="button"
            >
              <span className={styles.btnIcon}>💰</span>
              Find a Buyer
            </button>
          </div>
        </div>
      </div>
      {showPrompt && <DisabledOfferPrompt onClose={() => setShowPrompt(false)} />}
    </div>
  );
};