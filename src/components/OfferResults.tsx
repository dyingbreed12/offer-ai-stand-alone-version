'use client';

import { useAppContext } from '@/context/AppContext';
import { Offer } from '@/lib/types';

interface OfferResultsProps {
  showToast: (
    type: 'success' | 'error' | 'warning' | 'info',
    title: string,
    message: string
  ) => void;
}

export const OfferResults = ({ showToast }: OfferResultsProps) => {
  const { state, saveOffer, setCurrentOffer } = useAppContext();

  if (!state.currentOffer) return null;
  const offer = state.currentOffer;

  const handleSaveOffer = () => {
    if (state.currentOffer) {
      saveOffer(state.currentOffer);
      showToast('success', 'Offer Saved', 'Your offer was saved successfully!');
    }
  };

  const handleGenerateNew = () => {
    setCurrentOffer(null);
  };

  const handleDownloadOffer = () => {
    if (!state.currentOffer) return;

    const offerData = state.currentOffer;
    const finalValue = getFinalDisplayedAmount(offerData);

    const offerSheet = `
PROFESSIONAL REAL ESTATE OFFER SHEET
Generated by Lowball AI Bot

PROPERTY INFORMATION
==========================================
Property Address: ${offerData.address}
Offer Type: ${getOfferTypeText(offerData.offerType)}
Generated on: ${new Date().toLocaleDateString()}

FINANCIAL BREAKDOWN
==========================================
${getBreakdownText(offerData)}

FINAL OFFER: ${offerData.offerType === 'creative' ? `(Monthly) $${finalValue?.toLocaleString()}` : `$${finalValue?.toLocaleString()}`}

ADDITIONAL NOTES
==========================================
${offerData.notes || 'No additional notes provided.'}

This offer was generated using professional real estate investment calculations and market analysis.
    `.trim();

    const blob = new Blob([offerSheet], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `offer-${offerData.address.replace(/[^a-zA-Z0-9]/g, '-')}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);

    showToast('success', 'Offer Downloaded', 'The offer has been downloaded!');
  };

  const handleShareOffer = () => {
    if (!state.currentOffer) return;

    const offerData = state.currentOffer;
    const finalValue = getFinalDisplayedAmount(offerData);
    const offerTypeDisplay = getOfferTypeText(offerData.offerType);

    const shareText = `🏠 Professional Real Estate Offer Generated!\n\nProperty: ${
      offerData.address
    }\nOffer Amount: $${finalValue?.toLocaleString()}\nOffer Type: ${
      offerTypeDisplay
    }\n\nGenerated by Lowball AI Bot - Advanced Real Estate Investment Calculator`;

    if (navigator.share) {
      navigator.share({
        title: 'Real Estate Investment Offer',
        text: shareText,
        url: window.location.href,
      }).catch(console.error);
    } else {
      navigator.clipboard.writeText(shareText).then(() => {
        showToast('info', 'Offer Copied', 'Offer details copied to clipboard!');
      }).catch(() => {
        showToast('error', 'Copy Failed', 'Could not copy to clipboard.');
      });
    }
  };

  // Helper functions to handle different offer types
  const getFinalDisplayedAmount = (offer: Offer) => {
    switch (offer.offerType) {
      case 'creative':
        return offer.monthlyPayment;
      case 'novation':
      case 'zestimate':
      case 'cash':
      default:
        return offer.offerAmount;
    }
  };

  const getOfferTypeText = (type: string) => {
    switch (type) {
      case 'cash':
        return 'Fix & Flip';
      case 'creative':
        return 'Seller Finance';
      case 'novation':
        return 'Novation';
      case 'zestimate':
        return 'Zillow';
      default:
        return 'Unknown';
    }
  };

  const getOfferIcon = (type: string) => {
    switch (type) {
      case 'cash':
        return '💵';
      case 'creative':
        return '🎨';
      case 'novation':
        return '📝';
      case 'zestimate':
        return '📈';
      default:
        return '❓';
    }
  };

  const getBreakdownText = (offer: Offer) => {
    let breakdown = '';
    breakdown += `ARV (After Repair Value): $${offer.arv?.toLocaleString()}\n`;
    if (offer.offerType !== 'creative') {
      breakdown += `Estimated Repairs: $${offer.repairs?.toLocaleString()}\n\n`;
    }

    if (offer.offerType === 'creative') {
      breakdown += `As-Is Value: $${offer.asIsValue?.toLocaleString()}\n`;
      breakdown += `Downpayment: $${offer.downPayment?.toLocaleString()}\n`;
      breakdown += `Price: $${offer.price?.toLocaleString()}\n`;
      breakdown += `Term Length: ${offer.longLengthInMonths} months\n`;
    }

    return breakdown;
  };

  // --- UI ---
  const finalDisplayedAmount = getFinalDisplayedAmount(offer);
  const showDetailedBreakdown = ['cash', 'creative'].includes(offer.offerType as string);

  return (
    <div className="content-container">
      <div className="offer-results-section">
        <div className="offer-results-content">
          {/* Title */}
          <h2 className="offer-results-title">
            <span className="target-icon">🎯</span>
            Your Lowball Offer
          </h2>

          {/* Big Offer Number */}
          <div className="offer-amount">
            {offer.offerType === 'creative' ? `${finalDisplayedAmount?.toLocaleString()}/mo` : `$${finalDisplayedAmount?.toLocaleString()}`}
          </div>

          {/* Offer Type */}
          <div className="offer-type-display">
            <span className="offer-type-icon">{getOfferIcon(offer.offerType)}</span>
            {getOfferTypeText(offer.offerType)}
          </div>

          {/* Breakdown - This section is now conditionally rendered */}
          {showDetailedBreakdown && (
            <div className="offer-breakdown">
              {/* General Breakdown for 'cash' and 'creative' types */}

              <h3 className="breakdown-title">Breakdown</h3>
              {offer.offerType === 'cash' && (
                <div className="breakdown-row">
                  <div className="breakdown-item no-border-or-padding">
                    <span className="breakdown-label">Property ARV:</span>
                    <span className="breakdown-value">${offer.arv?.toLocaleString()}</span>
                  </div>
                  <div className="breakdown-item no-border-or-padding">
                    <span className="breakdown-label">Repairs:</span>
                    <span className="breakdown-value">${offer.repairs?.toLocaleString()}</span>
                  </div>
                </div>
              )}

              {/* Additional rows for specific offer types */}
              {offer.offerType === 'creative' && (
                <>
                  <div className="breakdown-row">
                    <div className="breakdown-item no-border-or-padding">
                      <span className="breakdown-label">As-Is Value:</span>
                      <span className="breakdown-value">${offer.asIsValue?.toLocaleString()}</span>
                    </div>
                    <div className="breakdown-item no-border-or-padding">
                      <span className="breakdown-label">Downpayment:</span>
                      <span className="breakdown-value">${offer.downPayment?.toLocaleString()}</span>
                    </div>
                  </div>
                  <div className="breakdown-row">
                    <div className="breakdown-item no-border-or-padding">
                      <span className="breakdown-label">Price:</span>
                      <span className="breakdown-value">${offer.price?.toLocaleString()}</span>
                    </div>
                    <div className="breakdown-item no-border-or-padding">
                      <span className="breakdown-label">Term Length:</span>
                      <span className="breakdown-value">{offer.longLengthInMonths} months</span>
                    </div>
                  </div>

                  <div className="final-offer-section">
                    <div className="final-offer-item no-border-or-padding">
                      <span className="final-offer-label">Final Offer (Monthly):</span>
                      <span className="final-offer-value">
                        ${offer.monthlyPayment?.toLocaleString()}
                      </span>
                    </div>
                  </div>
                </>
              )}
            </div>
          )}

          {/* Actions */}
          <div className="offer-actions">
            <button
              className="action-btn save"
              onClick={handleSaveOffer}
              type="button"
            >
              <span className="btn-icon">💾</span>
              Save Offer
            </button>
            <button
              className="action-btn generate"
              onClick={handleGenerateNew}
              type="button"
            >
              <span className="btn-icon">🔄</span>
              Generate New
            </button>
            <button
              className="action-btn download"
              onClick={handleDownloadOffer}
              type="button"
            >
              <span className="btn-icon">📥</span>
              Download TXT
            </button>
            <button
              className="action-btn share"
              onClick={handleShareOffer}
              type="button"
            >
              <span className="btn-icon">🔗</span>
              Share Offer
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};